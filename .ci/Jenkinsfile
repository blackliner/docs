
node('Linux') {
    echo "Building $env.BRANCH_NAME, change $env.CHANGE_ID"
    boolean isMaster = env.BRANCH_NAME == 'master'

    stage('Clone sources') {
        checkout scm
    }

    stage('Configure environment') {
        sh 'python --version'
        sh 'sudo apt-get update && sudo apt-get install -y enchant'
        sh 'pip install -r requirements.txt'
    }

    stage('Test build') {
        parallel html: {
            sh 'make html'
        },
        spelling: {
            sh 'make spelling'
        },
        linkcheck: {
            //sh 'make linkcheck'
            // TODO: Check return value, fail only if 'isMaster'
        }
    }

    if (!isMaster) {
        echo 'Stop here, do not run anything else for branches other than master'
        // return // TODO: Return here, remove comment
    }

    // Master branch generates all these versions
    Map<String, String> versions = [
        'master': '1.31',
        'release/1.30.2': '1.30',
        'release/1.29.2': '1.29',
        'release/1.28.2': '1.28',
        'release/1.27.1': '1.27',
        'release/1.26.1': '1.26',
        'release/1.25.2': '1.25',
        'release/1.24.1': '1.24',
        'release/1.23.0': '1.23',
        'release/1.22.3': '1.22',
        'release/1.21.3': '1.21',
        'release/1.20.5': '1.20',
        'release/1.19.3': '1.19',
        'release/1.18.5': '1.18',
        'release/1.17.2': '1.17',
        'release/1.16.1': '1.16',
        'release/1.15.2': '1.15',
        'release/1.14.5': '1.14',
        'release/1.13.3': '1.13',
        'release/1.12.3': '1.12',
        'release/1.11.2': '1.11',
        'release/1.10.2': '1.10',
        'release/1.9.4': '1.9',
        'release/1.8.4': '1.8',
        'release/1.7.4': '1.7',
        'release/1.6.1': '1.6',
        'release/1.5.2': '1.5',
        'release/1.4.5': '1.4',
        'release/1.3.3': '1.3'
        ]

    // Get useful variables for the following stages
    String themeFolder = "${pwd()}/_themes/conan"

    def parallelJobs = [:]
    versions.each({key, value ->
        def branchName = key
        def folderName = value
        parallelJobs[branchName] = {
            echo "Run parallel job for $branchName inside $folderName"

            stage('Clone sources') {
                checkout([$class: 'GitSCM',
                          branches: [[name: branchName ]],
                          userRemoteConfigs: scm.userRemoteConfigs,
                          extensions       : [[$class           : 'RelativeTargetDirectory',
                                               relativeTargetDir: folderName]],
                ])
            }

            stage('Copy versions.json') {
                writeJSON json: versions, file: "versions.json"
            }

            stage('Generate pages') {
                dir(folderName) {
                    String command = "sphinx-build -W -b html -d _build/doctrees . _build/html -D html_theme_path=$themeFolder"
                    dir ('_themes') { // TODO: Remove, this is just for testing
                        deleteDir()
                    }
                    sh command
                }
            }

        }
    })

    stage('Generate all releases') {
        parallel parallelJobs
    }
}
